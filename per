#!/bin/bash
MODEL="sonar"
SEARCH_CONTEXT_SIZE="medium"
BASE_URL="https://api.perplexity.ai"
API_KEY=$PERPLEXITY_API_KEY
AI="Perplexity"

# Error trapper
trap 'echo "Error on line $LINENO"' ERR

get_new_history_file() {
  HISTORY="$HOME/.perplexity-auto-history-$(date +%Y-%m-%d-%H-%M-%S)"
}

while getopts 'hdpu:lLnrRsc:' opt; do
  case "$opt" in
    c)
      BASE_URL="https://api.anthropic.com/v1"

      if [ "$OPTARG" == "3.5" ]; then
        MODEL="claude-3-5-haiku-latest"
      else
        MODEL="claude-3-7-sonnet-latest"
      fi

      SEARCH_CONTEXT_SIZE=""
      API_KEY=$CLAUDE_API_KEY
      AI="Claude"
      ;;
    h)
      SEARCH_CONTEXT_SIZE="high"
      ;;
    p)
      MODEL="sonar-pro"
      ;;
    d)
      MODEL="sonar-deep-research"
      SEARCH_CONTEXT_SIZE=""
      ;;
    r)
      MODEL="sonar-reasoning"
      ;;
    R)
      MODEL="sonar-reasoning-pro"
      ;;
    u)
      HISTORY="$HOME/.perplexity-history-$OPTARG"
      ;;
    s)
      HISTORY=$(ls ~/.perplexity-history-* | gum filter)
      if [ -z "$HISTORY" ]; then
        echo "No history file selected"
        exit 1
      fi
      ;;
    l)
      ls ~/.perplexity-history-* 2> /dev/null
      ;;
    n)
      get_new_history_file
      ;;
    L)
      ls ~/.perplexity-history-* 2> /dev/null
      ls ~/.perplexity-auto-history-* 2> /dev/null
      ;;
    \?)
      gum format "Invalid option: -$OPTARG"
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

default_history() {
  if stat -t ~/.perplexity-auto-history-* >/dev/null 2>&1; then
    # get most recent file matching ~/.perplexity-history-*
    HISTORY=$(ls -t ~/.perplexity-auto-history-* | head -n 1)
    MODIFIED_AGO="$(( ($(date +%s) - $(stat $HISTORY -c %Y)) / 60 ))"

    if [ "$MODIFIED_AGO" -gt 10 ]; then
      get_new_history_file
    fi
  else
    get_new_history_file
  fi
}

if [ -z "$HISTORY" ]; then
  default_history
fi

gum format "Using history file: $HISTORY"
touch "$HISTORY"

PROMPT="{
  \"role\": \"user\",
  \"content\": \"$@\"
}"

INITIAL_PROMPT="Be precise and concise. Do not add disclaimer as they cause me a great deal of inconfort."

DATA="
{
  \"model\": \"$MODEL\",
  $([[ $SEARCH_CONTEXT_SIZE != "" ]] && echo "\"search_context_size\": \"$SEARCH_CONTEXT_SIZE\"," || echo "")
  \"messages\": [
    {
      \"role\": \"system\",
      \"content\": \"$INITIAL_PROMPT\"
    },
    $(cat "$HISTORY")
    $PROMPT
  ]
}"

RESPONSE=$(gum spin --spinner dot --title "$AI is thinking..." -- curl --silent --location "$BASE_URL/chat/completions" \
--header 'accept: application/json' \
--header 'content-type: application/json' \
--header "Authorization: Bearer $API_KEY" \
--data "$DATA")

if echo "$RESPONSE" | jq -e ".error"> /dev/null 2>&1;
then
  echo "$RESPONSE" | jq ".error" > /dev/stderr
  exit 1
fi

if [ "$AI" == "Perplexity" ]; then
  # To show citation like "[1] website" we need to put number between [] and do +1 from the key
  CITATIONS=$(echo "$RESPONSE" | jq -r '.citations | to_entries | map("[" + ((.key + 1) | tostring) + "] " + .value) | join("\n")')
  echo "# Citations" | glow
  # Disable width wrapping
  echo "$CITATIONS" | glow --width 0
fi

CONTENT=$(echo "$RESPONSE" | jq -r '.choices.[0].message.content')

echo "# Results" | glow
# Disable width wrapping
echo "$CONTENT" | glow --width 0

MESSAGE=$(echo "$RESPONSE" | jq -r '.choices.[0].message')

echo "$PROMPT,$MESSAGE," >> "$HISTORY"
